/* automatically generated by rust-bindgen 0.71.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EasyJSRHandle {
    _unused: [u8; 0],
}
pub const JSArgType_JSARG_TYPE_INT: JSArgType = 0;
pub const JSArgType_JSARG_TYPE_DOUBLE: JSArgType = 1;
pub const JSArgType_JSARG_TYPE_STRING: JSArgType = 2;
pub const JSArgType_JSARG_TYPE_FLOAT: JSArgType = 3;
pub const JSArgType_JSARG_TYPE_BOOL: JSArgType = 4;
pub const JSArgType_JSARG_TYPE_INT64_T: JSArgType = 5;
pub const JSArgType_JSARG_TYPE_UINT32_T: JSArgType = 6;
pub const JSArgType_JSARG_TYPE_C_ARRAY: JSArgType = 7;
pub const JSArgType_JSARG_TYPE_NULL: JSArgType = 8;
#[doc = " @brief C version of our JSArg union"]
pub type JSArgType = ::std::os::raw::c_int;
#[doc = " @brief C version of our JSArg union"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JSArg {
    pub type_: JSArgType,
    pub value: JSArg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JSArg__bindgen_ty_1 {
    pub int_val: ::std::os::raw::c_int,
    pub double_val: f64,
    pub str_val: *const ::std::os::raw::c_char,
    pub jsvalue_id: ::std::os::raw::c_int,
    pub float_val: f32,
    pub bool_val: bool,
    pub uint32_t_val: u32,
    pub int64_t_val: i64,
    pub c_array_val: JSArg__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSArg__bindgen_ty_1__bindgen_ty_1 {
    pub items: *mut *mut JSArg,
    pub count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSArg__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<JSArg__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of JSArg__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<JSArg__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: JSArg__bindgen_ty_1__bindgen_ty_1::items"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1__bindgen_ty_1, items) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1__bindgen_ty_1::count"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1__bindgen_ty_1, count) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSArg__bindgen_ty_1"][::std::mem::size_of::<JSArg__bindgen_ty_1>() - 16usize];
    ["Alignment of JSArg__bindgen_ty_1"][::std::mem::align_of::<JSArg__bindgen_ty_1>() - 8usize];
    ["Offset of field: JSArg__bindgen_ty_1::int_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, int_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::double_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, double_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::str_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, str_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::jsvalue_id"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, jsvalue_id) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::float_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, float_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::bool_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, bool_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::uint32_t_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, uint32_t_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::int64_t_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, int64_t_val) - 0usize];
    ["Offset of field: JSArg__bindgen_ty_1::c_array_val"]
        [::std::mem::offset_of!(JSArg__bindgen_ty_1, c_array_val) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSArg"][::std::mem::size_of::<JSArg>() - 24usize];
    ["Alignment of JSArg"][::std::mem::align_of::<JSArg>() - 8usize];
    ["Offset of field: JSArg::type_"][::std::mem::offset_of!(JSArg, type_) - 0usize];
    ["Offset of field: JSArg::value"][::std::mem::offset_of!(JSArg, value) - 8usize];
};
#[doc = " @brief C Callback wrapper for DynCallback"]
pub type C_Callback = ::std::option::Option<
    unsafe extern "C" fn(
        args: *mut *mut JSArg,
        arg_count: usize,
        opaque: *mut ::std::os::raw::c_void,
    ) -> *mut JSArg,
>;
#[doc = " @brief C wrapper for FileLoaderFn"]
pub type C_FileLoaderFn = ::std::option::Option<
    unsafe extern "C" fn(
        file_path: *const ::std::os::raw::c_char,
        opaque: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char,
>;
#[doc = " @brief C version of JSMethod"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JSMethod {
    pub name: *const ::std::os::raw::c_char,
    pub cb: C_Callback,
    pub opaque: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JSMethod"][::std::mem::size_of::<JSMethod>() - 24usize];
    ["Alignment of JSMethod"][::std::mem::align_of::<JSMethod>() - 8usize];
    ["Offset of field: JSMethod::name"][::std::mem::offset_of!(JSMethod, name) - 0usize];
    ["Offset of field: JSMethod::cb"][::std::mem::offset_of!(JSMethod, cb) - 8usize];
    ["Offset of field: JSMethod::opaque"][::std::mem::offset_of!(JSMethod, opaque) - 16usize];
};
unsafe extern "C" {
    #[doc = " @brief Create a new easyjs runtime.\n\n It will have it's own callables, modules, classes, etc. It is all sandboxed within itself."]
    pub fn ejr_new() -> *mut EasyJSRHandle;
}
unsafe extern "C" {
    #[doc = " @brief Create a int JSArg.\n\n @param value The int\n\n @return JSArg"]
    pub fn jsarg_int(value: ::std::os::raw::c_int) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a const char* JSArg.\n\n @param value The const char*\n\n @return JSArg"]
    pub fn jsarg_str(value: *const ::std::os::raw::c_char) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a double JSArg.\n\n @param value The double\n\n @return JSArg"]
    pub fn jsarg_double(value: f64) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a float JSArg.\n\n @param value The float\n\n @return JSArg"]
    pub fn jsarg_float(value: f32) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a int64_t JSArg.\n\n @param value The int64_t\n\n @return JSArg"]
    pub fn jsarg_int64t(value: i64) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a uint32_t JSArg.\n\n @param value The uint32_t\n\n @return JSArg"]
    pub fn jsarg_uint32t(value: u32) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a C-Array JSArg.\n\n @param count The size of the array\n\n @return JSArg"]
    pub fn jsarg_carray(count: usize) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a null JSArg.\n\n @return JSArg"]
    pub fn jsarg_null() -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Create a bool JSArg.\n\n @param value The bool\n\n @return JSArg"]
    pub fn jsarg_bool(value: bool) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Add a JSArg value to a array.\n\n @param arg Pointer to the array.\n @param value the JSArg value."]
    pub fn jsarg_add_value_to_c_array(arg: *mut JSArg, value: *mut JSArg);
}
unsafe extern "C" {
    #[doc = " @brief Get a JSArg from a JSValue(int)\n\n @param handle the Easyjs runtime\n @param value the JSValue(int)\n\n @return JSArg"]
    pub fn jsarg_from_jsvalue(
        handle: *mut EasyJSRHandle,
        value: ::std::os::raw::c_int,
    ) -> *mut JSArg;
}
unsafe extern "C" {
    #[doc = " @brief Free a easyjs runtime"]
    pub fn ejr_free(handle: *mut EasyJSRHandle);
}
unsafe extern "C" {
    #[doc = " @brief Free a JSArg.\n\n @param arg A pointer to the JSArg to free."]
    pub fn jsarg_free(arg: *mut JSArg);
}
unsafe extern "C" {
    #[doc = " @brief Set the file_loader function.\n\n @param handle the easyjsr runtime.\n @param fn The file loader function.\n @param opaque some opaque data.\n"]
    pub fn ejr_set_file_loader(
        handle: *mut EasyJSRHandle,
        fn_: C_FileLoaderFn,
        opaque: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " @brief Evaluate a JS script at the global level.\n\n @param handle the easyjsr runtime.\n @param js The JS code.\n @param file_name The name of the file.\n\n @return The id of the created JSValue."]
    pub fn ejr_eval_script(
        handle: *mut EasyJSRHandle,
        js: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Evaluate a JS script as a module level.\n\n @param handle the easyjsr runtime.\n @param js The JS code.\n @param file_name The name of the file.\n\n @return The id of the created JSValue."]
    pub fn ejr_eval_module(
        handle: *mut EasyJSRHandle,
        js: *const ::std::os::raw::c_char,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Evaluate a JS function in the current scope/runtime.\n\n @param handle the easyjsr runtime.\n @param fn_name The JS function name.\n @param args The args to pass into the function.\n @param arg_count Number of args being passed.\n\n @return The id of the resulted JSValue."]
    pub fn ejr_eval_function(
        handle: *mut EasyJSRHandle,
        fn_name: *const ::std::os::raw::c_char,
        args: *mut *mut JSArg,
        arg_count: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Convert a JSValue into a c_string.\n\n @param handle the easyjsr runtime.\n @param value_id The id of the JSValue to be converted.\n\n @return The c_string."]
    pub fn ejr_val_to_string(
        handle: *mut EasyJSRHandle,
        value_id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Evaluate a JS function in the current scope/runtime on a class or object.\n\n @param handle the easyjsr runtime.\n @param value_id The objects/classes id in jsvad\n @param fn_name The JS function name.\n @param args The args to pass into the function.\n @param arg_count Number of args being passed.\n\n @return The id of the resulted JSValue."]
    pub fn ejr_eval_class_function(
        handle: *mut EasyJSRHandle,
        value_id: ::std::os::raw::c_int,
        fn_name: *const ::std::os::raw::c_char,
        args: *mut *mut JSArg,
        arg_count: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Get a property from a object.\n\n @param handle the easyjsr runtime.\n @param value_id The objects/classes id in jsvad\n @param property The property name.\n\n @return the Id of the resulted value."]
    pub fn ejr_get_property_from(
        handle: *mut EasyJSRHandle,
        value_id: ::std::os::raw::c_int,
        property: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Get a property from Global scope.\n\n @param handle the easyjsr runtime.\n @param property The property name.\n\n @return the Id of the resulted value."]
    pub fn ejr_get_from_global(
        handle: *mut EasyJSRHandle,
        property: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Register a callback in JS.\n\n @param handle The easyjsr runtime.\n @param fn_name Name to give the callback.\n @param cb The actual C callback.\n @param opaque Opaque user data."]
    pub fn ejr_register_callback(
        handle: *mut EasyJSRHandle,
        fn_name: *const ::std::os::raw::c_char,
        cb: C_Callback,
        opaque: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[doc = " @brief Register a module in JS.\n\n @param handle The easyjsr runtime.\n @param module_name Name to give the module.\n @param methods A array of methods to add to the runtime.\n @param method_count number of methods."]
    pub fn ejr_register_module(
        handle: *mut EasyJSRHandle,
        module_name: *const ::std::os::raw::c_char,
        methods: *mut JSMethod,
        method_count: usize,
    );
}
unsafe extern "C" {
    #[doc = " @brief Free a C string.\n\n @param c_string The c string to free."]
    pub fn ejr_free_string(c_string: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[doc = " @brief Free a JSValue within the JSValueAD.\n\n @param handle The easyjsr runtime associated.\n @param value_id id of the value to free."]
    pub fn ejr_free_jsvalue(handle: *mut EasyJSRHandle, value_id: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
