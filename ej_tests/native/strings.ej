import 'std'

native {
    struct String[
        _ptr:int,
        _len:int,
        _cap:int
    ] {
        fn init()

        override fn +(other: string): String {
            __str_concat(self.ptr, other)
        }
    }

    pub fn test_string():string {
        msg : string = "Hello"
        return msg
    }

    pub fn test_return_literal():string {
        return "Literal return"
    }

    pub fn new_string(message: string): string {
        return message
    }

    pub fn concat_strings_test(string1: string, string2: string):string {
        return __str_concat(string1, string2)
    }

    pub fn test_concat_within():string {
        this_is_a := "This is a "
        test := "test"
        return this_is_a + test
    }

    pub fn test_literal_concat():string {
        return "Literal " + "concat " + "dude"
    }

    pub fn test_index_expression():string {
        str = "This"
        return str[0] // should be T
    }

    pub fn test_char_code_at(str:string, index:int):int {
        return __str_char_code_at(str, index)
    }

    pub fn test_index_expression2():string {
        return "Thist"[4]
    }

    pub fn test_index_expression_negative():string {
        t := "Test"
        t2 := "Yyeo"
        t_char := t[-1]
        t2_char := t2[-2]
        return t_char + t2_char + "What"[0]
    }

}

javascript{
    const assert = require('assert').strict;
}

assert.strictEqual(test_string(), "Hello")
assert.strictEqual(test_return_literal(), "Literal return")
assert.strictEqual(new_string("New"), "New")
assert.strictEqual(concat_strings_test("Concat ", "strings"), "Concat strings")
assert.strictEqual(test_concat_within(), "This is a test")
assert.strictEqual(test_literal_concat(), "Literal concat dude")
assert.strictEqual(test_index_expression(), "T")

string = "CharCodeAt"
assert.strictEqual(test_char_code_at(string, 0), string.charCodeAt(0))

assert.strictEqual(test_index_expression2(), "t")
assert.strictEqual(test_index_expression_negative(), "teW")

@print('all tests passed')