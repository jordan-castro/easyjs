import 'std'

native {
    pub fn test_string():string {
        msg : string = "Hello"
        return msg
    }

    pub fn test_return_literal():string {
        return "Literal return"
    }

    pub fn new_string(message: string): string {
        return message
    }

    pub fn concat_strings_test(string1: string, string2: string):string {
        return __str_concat(string1, string2)
    }

    pub fn test_concat_within():string {
        this_is_a := "This is a "
        test := "test"
        return this_is_a + test
    }

    pub fn test_literal_concat():string {
        return "Literal " + "concat " + "dude"
    }
}

javascript{
    const assert = require('assert').strict;
}

assert.strictEqual(test_string(), "Hello")
assert.strictEqual(test_return_literal(), "Literal return")
assert.strictEqual(new_string("New"), "New")
assert.strictEqual(concat_strings_test("Concat ", "strings"), "Concat strings")
assert.strictEqual(test_concat_within(), "This is a test")
assert.strictEqual(test_literal_concat(), "Literal concat dude")

@print('all tests passed')