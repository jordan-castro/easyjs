fs = require('fs/promises')

types = use_mod('core:types')
builtins = use_mod('core:builtins')

/// Parse the transcript based on the `sentences`
///
/// @param {array} sentences
fn parse_transcript(sentences, agregious_words, negative_words) {
    var transcript = ""
    
    // color options
    var color_options = {
        MISC: '#85A947',
        ORG: '#85A947',
        LOC: '#85A947',
        AGR: '#C30E59',
        NEG: '#C30E59'    
    }

    // format the time
    format_time = fn(seconds) {
        minutes = new types.Int(seconds / 60)
        remaining_secs = new types.Int(seconds % 60)
        padded_minutes = minutes.toString().padStart(2, '0')
        padded_seconds = remaining_secs.toString().padStart(2, '0')
        return "$padded_minutes:$padded_seconds"
    }

    // loop through all sentences
    for sentence in sentences.list {
        // get sentence element
        var sentence_element = sentence.element
        // get start of sentence
        var sentence_start = format_time(sentence_element.start)
        var speaker = sentence_element.speaker

        // grab the actual sentence
        var merged_sentence = sentence_element.merged_sentence
        
        if sentence_element.entities != null and sentence_element.entities != undefined {
            // now get the entities
            for entity in sentence_element.entities.list {
                var entity_element = entity.element
                var start_offset = entity_element.start
                var end_offset = entity_element.end
                var entity_group = entity_element.entity_group
                var word = entity_element.word

                // update the merged_sentence
                var before = merged_sentence.slice(0, start_offset)
                var add = '
                <span style="color: ${color_options[entity_group]}; font-weight: bold;" title="$entity_group">
                $word</span>'

                var after = merged_sentence.slice(start_offset + word.length)

                merged_sentence = before + add + after
            }
        }

        transform_words = fn(sentence, words, group) {
            var ns = sentence
            for object in words {
                var element = object.element
                var word = element.word

                var lower_n_capital = [word, builtins.capitalize(word)]
                for w in lower_n_capital {
                    ns = ns.replaceAll(w, '<span style="color: ${color_options[group]}; font-weight: bold;" title="$group">
                        $w
                        </span>
                    ')
                }
            }

            return ns
        }

        // now transform the agregious and negative words
        for agr_words in agregious_words {
            merged_sentence = transform_words(merged_sentence, agr_words, 'AGR')
        }
        for neg_words in negative_words {
            merged_sentence = transform_words(merged_sentence, neg_words, 'NEG')
        }

        transcript += "[$sentence_start] <strong>$speaker</strong> $merged_sentence<br><br>"
    }

    return transcript
}

async {
    data = JSON.parse(await fs.readFile('ej_tests/data.json'))

    transcript = parse_transcript(
        data[0].result[0].sentences, 
        [data[0].result[0].agent_agregious, data[0].result[0].customer_agregious],
        [data[0].result[0].agent_negative, data[0].result[0].customer_negative]
    )

    console.log(transcript)
}