macro sleep(_ms) {
    @const(func), fn(ms) {
        return new Promise(resolve => setTimeout(resolve, ms))
    })

    await func(_ms)
}

// Creates a range
macro range(kwargs) {
    @run_function(fn() {
        start = kwargs.start
        end = kwargs.end
        step = kwargs.step ?? 1

        javascript{
            return Array(Math.ceil((end - start) / step)).fill(start).map((x,y) => x + y * step)
        }
    })
}

// Flatten a list in JS.
macro flatten(list) {
    javascript {
        [...new Set(list)];
    }
}

// Capitalize a string
macro capitalize(str) {
    "${str.charAt(0).toUpperCase()}${str.slice(1)}"
}

// Merge 2 arrays
macro merge(arr1, arr2, flatten) {
    narr = [].concat(arr1, arr2)

    fn {
        if flatten == true {
            return flat(narr)
        }

        return narr
    }
}

// Reverse a string
macro reverse_string(str) {
    fn {
        return str.split("").reverse().join("")
    }
}
// Get the EasyJS ASCII
macro easyjs_ascii() {
    "    ___       ___       ___       ___            ___       ___   
   /\\  \\     /\\  \\     /\\  \\     /\\__\\          /\\  \\     /\\  \\  
  /::\\  \\   /::\\  \\   /::\\  \\   |::L__L        _\\:\\  \\   /::\\  \\ 
 /::\\:\\__\\ /::\\:\\__\\ /\\:\\:\\__\\  |:::\\__\\      /\\/::\\__\\ /\\:\\:\\__\\
 \\:\\:\\/  / \\/\\::/  / \\:\\:\\/__/  /:;;/__/      \\::/\\/__/ \\:\\:\\/__/
  \\:\\/  /    /:/  /   \\::/  /   \\/__/          \\/__/     \\::/  / 
   \\/__/     \\/__/     \\/__/                              \\/__/  "
}