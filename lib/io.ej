// File/Directory reading/writing

import 'std' as _

@const(fs = require('node:fs'))
@const(fs_promises = require('node:fs/promises'))

// Read a file
macro read_file(file_path, encoding, is_async) {
    fn {
        if #is_async == true {
            return (
                async fn() { 
                    return await fs_promises.readFile(#file_path, {encoding: #encoding}) 
                }
            )()
        } else {
            // Regular io
            file_data = null
            @try_catch(fn() {
                file_data = fs.readFileSync(#file_path, #encoding)
            }, fn(err) {
                @log_error(err)
            })

            return file_data
        }
    }
}

// Write a file
macro write_file(file_path, data, is_async) {
    fn {
        if #is_async == true {
            return (
                async fn() {
                    result = false
                    @try_catch(async fn(){
                        await fs_promises.writeFile(#file_path, #data)
                        result = true
                    }, fn(err) {
                        @log_error(err)
                    })
                    return result
                }
            )()
        } else {
            // Regular io
            result = false
            @try_catch(fn(){
                fs.writeFileSync(#file_path, #data)
                result = true
            }, fn(err) {
                @log_error(err)
            })
            return result
        }
    }
}

// Check if a file exists (only synchronous)
macro file_exists(file_path) {
    fs.existsSync(#file_path)
}

// Check directory exists (only synchronous)
macro dir_exists(dir_path) {
    @file_exists(#dir_path)
}

// read files in a directory
macro read_dir(dir_path, is_async) {
    fn {
        if #is_async == true {
            return (
                async fn() { 
                    return await fs_promises.readdir(#dir_path) 
                }
            )()
        } else {
            dir_contents = []
            @try_catch(fn() {
                dir_contents = fs.readdirSync(#dir_path)
            }, fn(err) {
                @log_error(err)
            })
            return dir_contents
        }
    } 
}

// Make a directory
macro make_dir(dir_path, is_async) {
    if #is_async == true {
        fs_promises.mkdir(#dir_path)
    } else {
        fs.mkdirSync(#dir_path)
    }
}