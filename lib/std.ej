// Get the last element of an array
macro last(array) {
    #array[#array.length - 1]
}

macro print(...msg) {
    console.log(#msg)
}

// Get the first element of an array
macro first(array) {
    #array[0]
}

macro throw(error_msg) {
    javascript {
        throw new Error(#error_msg);
    }
}

// Try to do an operation.
macro try(method, throw) {
    ___try = #method
    javascript {
        try {
            ___try();
        } catch (e) {
            if (#throw == true) {
                throw e;
            }
        }
    }
}

// Try and catch a operation
macro try_catch(method, on_catch) {
    ___try = #method
    ___catch = #on_catch
    javascript {
        try {
            ___try();
        } catch (e) {
            ___catch(e)
        }
    }
}

// Decouple 2 objects. 1 of identifiers, and 1 of matching length/key of values.
macro decouple(idents, values) {
    #idents = #values
}

// declare a constant variable 
macro const(expr) {
    javascript {
        const #expr;
    }
}

macro run_function(fun) {
    #fun()
}

macro sleep(ms) {
    @const(func = fn(ms) {
        javascript{
            return new Promise(resolve => setTimeout(resolve, ms))
        }
    })

    await func(#ms)
}

// Creates a range
macro range(kwargs) {
    @run_function(fn() {
        start = #kwargs.start
        end = #kwargs.end
        step = #kwargs.step ?? 1

        javascript{
            return Array(Math.ceil((end - start) / step)).fill(start).map((x,y) => x + y * step)
        }
    })
}

// Flatten a list in JS.
macro flatten(list) {
    javascript {
        [...new Set(#list)];
    }
}

// Merge 2 arrays
macro merge(arr1, arr2, flatten) {
    narr = [].concat(#arr1, #arr2)

    fn {
        if #flatten == true {
            return flat(narr)
        }

        return narr
    }
}

// Reverse a string
macro reverse_string(str) {
    fn {
        return #str.split("").reverse().join("")
    }
}

// Get the EasyJS ASCII
macro easyjs_ascii() {
    "    ___       ___       ___       ___            ___       ___   
   /\\  \\     /\\  \\     /\\  \\     /\\__\\          /\\  \\     /\\  \\  
  /::\\  \\   /::\\  \\   /::\\  \\   |::L__L        _\\:\\  \\   /::\\  \\ 
 /::\\:\\__\\ /::\\:\\__\\ /\\:\\:\\__\\  |:::\\__\\      /\\/::\\__\\ /\\:\\:\\__\\
 \\:\\:\\/  / \\/\\::/  / \\:\\:\\/__/  /:;;/__/      \\::/\\/__/ \\:\\:\\/__/
  \\:\\/  /    /:/  /   \\::/  /   \\/__/          \\/__/     \\::/  / 
   \\/__/     \\/__/     \\/__/                              \\/__/  "
}

// add a to_string method for a enum
macro add_to_string_to_enum(enum_name) {
    /// Convert #enum_name to a String representation.
    fn #enum_name_to_string(val) {
        keys = Object.keys(#enum_name)
        for key in keys {
            if #enum_name[key] == val {
                return key
            }
        }

        // Was not found
        return null
    }
}

// Call Object.keys on a object
macro keys(object) {
    Object.keys(#object)
}

// Call Object.freeze on a object
macro freeze(object) {
    Object.freeze(#object)
}

// Check type
macro is_type(variable, type_name) {
    typeof(#variable) == #type_name
}

// log error
macro log_error(err) {
    console.error(#err)
}

// JS comment
macro jsc(comment) {
    javascript{
        // #comment
    }
}

// Null Dot operation
macro null_dot(object, field_or_method) {
    javascript{
        #object?.#field_or_method
    }
}

// Is null
macro is_null(object) {
    javascript{
        (#object === null)
    }
}

// Is undefined
macro is_undefined(object) {
    javascript{
        (#object === undefined)
    }
}

// Is null or undefined
macro is_null_undefined(object) {
    javascript{
        (#object === null || #object === undefined)
    }
}